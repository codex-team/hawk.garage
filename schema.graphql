"""Access to the field only to authorized users"""
directive @requireAuth on FIELD_DEFINITION

"""Access to the field only for admins"""
directive @requireAdmin on FIELD_DEFINITION

"""Directive for field renaming"""
directive @renameFrom(
  """Parent's field name"""
  name: String!
) on FIELD_DEFINITION

"""Directive for setting field default value"""
directive @default(
  """Default field value encoded in JSON"""
  value: String!
) on FIELD_DEFINITION

"""Directive for automatically image uploading"""
directive @uploadImage on ARGUMENT_DEFINITION

"""Directive for checking a field for empty space"""
directive @validate(notEmpty: Boolean, isEmail: Boolean) on ARGUMENT_DEFINITION

"""Directive for checking user in workspace"""
directive @requireUserInWorkspace on FIELD_DEFINITION

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

"""User bank card"""
type BankCard {
  """Bank card id"""
  id: ID!

  """Last four numbers of card PAN"""
  lastFour: Int!
}

"""Payment link structure"""
type BillingSession {
  """Total payment amount in kopecs"""
  amount: Long!

  """Payment status"""
  status: String!

  """If the payment is successfull"""
  success: Boolean!

  """URL to the payment page"""
  paymentURL: String!
}

"""Business operation object"""
type BusinessOperation {
  """Id of operation"""
  id: String!

  """Business operation type"""
  type: BusinessOperationType!

  """Indicates current state of the operation"""
  status: BusinessOperationStatus!

  """Metadata related to the operation type"""
  payload: BusinessOperationPayload!

  """When the operation was registered"""
  dtCreated: DateTime!
}

"""All available payload types for different types of operations"""
union BusinessOperationPayload = PayloadOfDepositByUser | PayloadOfWorkspacePlanPurchase

"""Business operations statuses"""
enum BusinessOperationStatus {
  """Business operation is pending"""
  PENDING

  """Business operation is confirmed"""
  CONFIRMED

  """Business operation is rejected"""
  REJECTED
}

"""Types of business operations"""
enum BusinessOperationType {
  """Workspace plan purchase by payment worker"""
  WORKSPACE_PLAN_PURCHASE

  """Workspace deposit balance by user"""
  DEPOSIT_BY_USER
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""Input data for cancelSubscription mutation"""
input CancelSubscriptionInput {
  """Workspace id to cancel subscription for"""
  workspaceId: ID!
}

"""Respose of the cancelSubscription mutation"""
type CancelSubscriptionResponse {
  """Workspace id"""
  recordId: ID!

  """Modified workspace"""
  record: Workspace!
}

"""
This object will be returned to the changeUserNotificationsChannel mutation
"""
type changeUserNotificationsChannelResponse {
  notifications: UserNotificationsSettings
}

"""The structure represents payload for toggling receive type"""
input ChangeUserNotificationsReceiveTypeInput {
  IssueAssigning: Boolean
  WeeklyDigest: Boolean
}

"""
This object will be returned to the changeUserNotificationsReceiveType mutation
"""
type changeUserNotificationsReceiveTypeResponse {
  notifications: UserNotificationsSettings
}

"""Payload for changing workspace tariff plan"""
input changeWorkspacePlanToDefaultInput {
  """Workspace ID"""
  workspaceId: ID!
}

"""Workspace tariff plan change mutation response"""
type changeWorkspacePlanToDefaultResponse {
  """Workspace id which plan changed"""
  recordId: ID

  """Workspace which plan changed"""
  record: Workspace!
}

type ChartDataItem {
  """Events timestamp"""
  timestamp: Int

  """Amount of events"""
  count: Int
}

"""Confirmed member data in workspace"""
type ConfirmedMember {
  """Member info id"""
  id: ID!

  """If member accepts an invitation, the user id will be stored there"""
  user: User!

  """True if user has admin permissions"""
  isAdmin: Boolean!
}

"""Input type for creating new notification rule"""
input CreateProjectNotificationsRuleInput {
  """Project id to setup"""
  projectId: ID!

  """True if settings is enabled"""
  isEnabled: Boolean! = true

  """What events type to recieve"""
  whatToReceive: ReceiveTypes! = ONLY_NEW

  """Words to include in notification"""
  including: [String!]! = []

  """Words to exclude from notification"""
  excluding: [String!]! = []

  """Treshold to be reached to send notification"""
  threshold: Int = 100

  """Treshold period in milliseconds"""
  thresholdPeriod: Int = 3600000

  """Notification channels to recieve events"""
  channels: NotificationsChannelsInput!
}

"""Information about event per day"""
type DailyEventInfo {
  """Event hash for grouping"""
  groupHash: String!

  """Event occurrence count"""
  count: Int!

  """Event occurrence datetime (in unixtime)"""
  groupingTimestamp: Float!

  """Event's last repetition ID"""
  lastRepetitionId: ID

  """Last event occurrence timestamp"""
  lastRepetitionTime: Float!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Represents JSON objects encoded (or not) in string format"""
scalar EncodedJSON

"""Type representing Hawk single Event"""
type Event {
  """Event id"""
  id: ID!

  """Catcher type"""
  catcherType: String!

  """Event group hash"""
  groupHash: String!

  """Event occurrence count"""
  totalCount: Int!

  """User assigneed to the event"""
  assignee: User

  """Event payload"""
  payload: EventPayload!

  """Event concrete repetition"""
  repetition(id: ID): Repetition

  """Event repetitions"""
  repetitions(limit: Int = 10): [Repetition!]

  """Array of users who visited event"""
  visitedBy: [User!]

  """Event label for current user"""
  marks: EventMarks!

  """How many users catch this error"""
  usersAffected: Int

  """Return graph of the error rate for the last few days"""
  chartData(
    """How many days we need to fetch for displaying in a chart"""
    days: Int! = 0

    """User's local timezone offset in minutes"""
    timezoneOffset: Int! = 0
  ): [ChartDataItem!]!
}

"""Event backtrace representation"""
type EventBacktraceFrame {
  """Source filepath"""
  file: String

  """Called line"""
  line: Int

  """Called column"""
  column: Int

  """Part of source code file near the called line"""
  sourceCode: [SourceCodeLine]

  """Function name extracted from current stack frame"""
  function: String

  """Function arguments extracted from current stack frame"""
  arguments: [String]
}

"""Possible event marks"""
enum EventMark {
  resolved
  starred
  ignored
}

"""Object returned in marks property of event object"""
type EventMarks {
  resolved: Boolean!
  starred: Boolean!
  ignored: Boolean!
}

"""Type representing Event payload"""
type EventPayload {
  """Event title"""
  title: String!

  """Event type: TypeError, ReferenceError etc."""
  type: String

  """Event timestamp"""
  timestamp: Float!

  """Event severity level"""
  level: Int

  """Event stack array from the latest call to the earliest"""
  backtrace: [EventBacktraceFrame]

  """Additional data about GET request"""
  get: JSONObject

  """Additional data about POST request"""
  post: JSONObject

  """HTTP headers"""
  headers: JSONObject

  """Source code version identifier"""
  release: String

  """Current authenticated user"""
  user: EventUser

  """Any additional data of Event"""
  context: EncodedJSON

  """Custom data provided by project users"""
  addons: EncodedJSON
}

"""Events filters input type"""
input EventsFiltersInput {
  """If True, includes events with resolved mark to the output"""
  resolved: Boolean

  """If True, includes events with starred mark to the output"""
  starred: Boolean

  """If True, includes events with ignored mark to the output"""
  ignored: Boolean
}

type EventsMutations {
  """Set an assignee for the selected event"""
  updateAssignee(input: UpdateAssigneeInput!): UpdateAssigneeResponse!

  """Remove an assignee from the selected event"""
  removeAssignee(input: RemoveAssigneeInput!): RemoveAssigneeResponse!
}

"""Possible events order"""
enum EventsSortOrder {
  BY_DATE
  BY_COUNT
}

"""Event user representation"""
type EventUser {
  """Internal user's identifier inside an app"""
  id: ID

  """User public name"""
  name: String

  """URL for user's details page"""
  url: String

  """User's public picture"""
  photo: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""Supported languages for data"""
enum Languages {
  EN
  RU
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

"""Represents two types of Members in workspace's team"""
union Member = ConfirmedMember | PendingMember

"""API mutations"""
type Mutation {
  """Unused field to let extend this type"""
  _: Boolean

  """Remove card"""
  removeCard(cardNumber: String!): Boolean!

  """Mutation for processing payment with saved card"""
  payWithCard(input: PayWithCardInput!): PayWithCardResponse!

  """Returns JSON data with payment link and initiate card attach procedure"""
  attachCard(language: String): BillingSession!

  """Mutation marks event as visited for current user"""
  visitEvent(project: ID!, id: ID!): Boolean!

  """Mutation sets or unsets passed mark to event"""
  toggleEventMark(
    """ID of project event is related to"""
    project: ID!

    """EvenID of the event to set the mark"""
    eventId: ID!

    """Mark to set"""
    mark: EventMark!
  ): Boolean!

  """Namespace that contains only mutations related to the events"""
  events: EventsMutations!

  """
  Creates new notification rule and add it to start of the array of notifications rules
  """
  createProjectNotificationsRule(
    """Data for creating"""
    input: CreateProjectNotificationsRuleInput!
  ): ProjectNotificationsRule

  """Updates existing notifications rule"""
  updateProjectNotificationsRule(
    """Data for updating"""
    input: UpdateProjectNotificationsRuleInput!
  ): ProjectNotificationsRule

  """Removes notifications rule from project"""
  deleteProjectNotificationsRule(
    """Data for deleting"""
    input: ProjectNotificationRulePointer!
  ): ProjectNotificationsRule

  """Toggles isEnabled field in in project notifications rule"""
  toggleProjectNotificationsRuleEnabledState(
    """Data for toggling"""
    input: ProjectNotificationRulePointer
  ): ProjectNotificationsRule

  """Unsubscribe from notifications by disabling the rule"""
  unsubscribeFromNotifications(
    """Data for unsubscribing"""
    input: ProjectNotificationRulePointer!
  ): ProjectNotificationsRule

  """Create project in given workspace"""
  createProject(
    """Workspace ID"""
    workspaceId: ID!

    """Project name"""
    name: String!

    """Project image"""
    image: Upload
  ): Project!

  """Update project settings"""
  updateProject(
    """What project to update"""
    id: ID!

    """Project name"""
    name: String!

    """Project description"""
    description: String

    """Project image"""
    image: Upload
  ): Project!

  """Remove project"""
  removeProject(
    """What project to remove"""
    projectId: ID!
  ): Boolean!

  """Updates user's visit time on project"""
  updateLastProjectVisit(
    """project ID"""
    projectId: ID!
  ): DateTime!

  """Register user with provided email. Returns true if registred"""
  signUp(
    """Registration email"""
    email: String!
  ): Boolean!

  """Login user with provided email and password"""
  login(
    """User email"""
    email: String!

    """User password"""
    password: String!
  ): Tokens!

  """Update user's tokens pair"""
  refreshTokens(
    """Refresh token for getting new token pair"""
    refreshToken: String!
  ): Tokens!

  """Reset user's password"""
  resetPassword(
    """User email"""
    email: String!
  ): Boolean!

  """Update user's profile"""
  updateProfile(
    """User name"""
    name: String!

    """User email"""
    email: String!

    """User image file"""
    image: Upload
  ): Boolean!

  """Change user password"""
  changePassword(
    """Current user password"""
    oldPassword: String!

    """New user password"""
    newPassword: String!
  ): Boolean!

  """Change user notifications channel settings"""
  changeUserNotificationsChannel(
    """Channel data to update"""
    input: NotificationsChannelsInput!
  ): changeUserNotificationsChannelResponse!

  """Toggle user notifications receive type active status"""
  changeUserNotificationsReceiveType(
    """Receive type with its new is-enabled value"""
    input: ChangeUserNotificationsReceiveTypeInput!
  ): changeUserNotificationsReceiveTypeResponse!

  """Create new workspace"""
  createWorkspace(
    """New workspace name"""
    name: String!

    """New workspace description"""
    description: String

    """New workspace image"""
    image: Upload
  ): Workspace!

  """
  Invite user to workspace
  Returns true if operation is successful
  """
  inviteToWorkspace(
    """Email of the user to invite"""
    userEmail: String!

    """id of the workspace to which the user is invited"""
    workspaceId: ID!
  ): Boolean!

  """Update workspace settings"""
  updateWorkspace(
    """What workspace to update"""
    workspaceId: ID!

    """Workspace name"""
    name: String!

    """Workspace description"""
    description: String

    """Workspace image"""
    image: Upload
  ): Boolean!

  """
  Confirm invitation to workspace
  Returns true if operation is successful
  """
  confirmInvitation(
    """Hash from invitation link"""
    inviteHash: String

    """Id of the workspace to which the user was invited"""
    workspaceId: ID!
  ): Boolean!

  """
  Grant admin permissions
  Returns true if operation is successful
  """
  grantAdmin(
    """Workspace ID"""
    workspaceId: ID!

    """ID of user to grant permissions"""
    userId: ID!

    """Permissions state (true to grant, false to withdraw)"""
    state: Boolean = true
  ): Boolean!

  """
  Remove member from workspace
  Returns true if operation is successful
  """
  removeMemberFromWorkspace(
    """Workspace ID"""
    workspaceId: ID!

    """ID of user to remove"""
    userId: ID

    """Email of user to remove"""
    userEmail: String
  ): Boolean!

  """
  Mutation in order to leave workspace
  Returns true if operation is successful
  """
  leaveWorkspace(
    """Workspace ID"""
    workspaceId: ID!
  ): Boolean!

  """
  Mutation in order to switch workspace tariff plan to Free
  Returns updated workspace
  """
  changeWorkspacePlanToDefault(input: changeWorkspacePlanToDefaultInput): changeWorkspacePlanToDefaultResponse!

  """Namespace for workspaces mutations"""
  workspace: WorkspaceMutations!


  """
  !Seed resolver!
  Creates user
  """
  createUser(
    """User email"""
    email: String!
    """User password"""
    password: String!
  ): User!


  """
  !Seed resolver!
  Deletes user by email
  """
  deleteUser(
    """User email"""
    email: String!
  ): Boolean
}

"""All available notification channels"""
type NotificationsChannels {
  """Email channel"""
  email: NotificationsChannelSettings

  """Telegram channel"""
  telegram: NotificationsChannelSettings

  """Slack channel"""
  slack: NotificationsChannelSettings

  """Webpush"""
  webPush: NotificationsChannelSettings

  """Push from Hawk Desktop app"""
  desktopPush: NotificationsChannelSettings
}

"""Settings for notification channels"""
type NotificationsChannelSettings {
  """True if channel is enabled"""
  isEnabled: Boolean!

  """Where to deliver messages"""
  endpoint: String!

  """How often to send event (one alert in 'minPeriod' secs)"""
  minPeriod: Int!
}

"""Input type for updateting channel settings"""
input NotificationsChannelSettingsInput {
  """True if channel is enabled"""
  isEnabled: Boolean! = true

  """Where to deliver messages"""
  endpoint: String!

  """How often to send event (one alert in 'minPeriod' secs)"""
  minPeriod: Int! = 60
}

"""Input type for creating and updating notification channels"""
input NotificationsChannelsInput {
  """Email channel"""
  email: NotificationsChannelSettingsInput

  """Telegram channel"""
  telegram: NotificationsChannelSettingsInput

  """Slack channel"""
  slack: NotificationsChannelSettingsInput

  """Web push"""
  webPush: NotificationsChannelSettingsInput

  """Desktop push"""
  desktopPush: NotificationsChannelSettingsInput
}

"""Business operation payload type for 'DepositByUser' operation type"""
type PayloadOfDepositByUser {
  """Workspace to which the payment is credited"""
  workspace: Workspace!

  """Amount of payment in US cents"""
  amount: Long!

  """User who made the payment"""
  user: User!

  """PAN of card which user made the payment"""
  cardPan: String
}

"""
Business operation payload type for 'WorkspacePlanPurchase' operation type
"""
type PayloadOfWorkspacePlanPurchase {
  """Workspace to which the payment is debited"""
  workspace: Workspace!

  """Amount of payment * 100 """
  amount: Long!

  """Currency of payment"""
  currency: String!
}

"""Input for single payment"""
input PayOnceInput {
  """Total payment amount in kopecs"""
  amount: Long!

  """Workspace id for which the payment will be made"""
  workspaceId: ID!

  """Payment form language"""
  language: SupportedBillingLanguages = RU
}

"""Data for processing payment with saved card"""
input PayWithCardInput {
  """Checksum for data validation"""
  checksum: String!

  """Card id for payment"""
  cardId: String!

  """
  Is payment recurrent or not. If payment is recurrent, then the money will be debited every month
  """
  isRecurrent: Boolean
}

"""Response of mutation for processing payment with saved card"""
type PayWithCardResponse {
  """Id of the created business operation"""
  recordId: ID!

  """Created business operation"""
  record: BusinessOperation!
}

"""Pending member data in workspace"""
type PendingMember {
  """Member info id"""
  id: ID!

  """Email to which the invitation was sent"""
  email: String!
}

"""Hawk tariff plan description"""
type Plan {
  """Plan id in MongoDB"""
  id: ID!

  """Plan name"""
  name: String!

  """Monthly charge for plan"""
  monthlyCharge: Int!

  """Monthly charge currency for plan"""
  monthlyChargeCurrency: String!

  """Events limit for plan"""
  eventsLimit: Int!

  """True if plan is default one"""
  isDefault: Boolean!
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

"""Project representation"""
type Project {
  """Project ID"""
  id: ID!

  """Project token"""
  token: String!

  """Project name"""
  name: String!

  """Project description"""
  description: String

  """Project domain"""
  domain: String

  """Project URI"""
  uri: String

  """Project image"""
  image: String

  """User who created project"""
  uidAdded: User!

  """Project's Event"""
  event(id: ID!): Event

  """Project events"""
  events(
    """Maximum number of results"""
    limit: Int = 50

    """Certain number of documents to skip"""
    skip: Int = 0
  ): [Event!]

  """Returns recent events grouped by day"""
  recentEvents(
    """Maximum number of results"""
    limit: Int! = 50

    """Certain number of documents to skip"""
    skip: Int! = 0

    """Events sort order"""
    sort: EventsSortOrder

    """Event marks by which events should be sorted"""
    filters: EventsFiltersInput

    """Search query"""
    search: String
  ): RecentEvents

  """Return events that occurred after a certain timestamp"""
  chartData(
    """How many days we need to fetch for displaying in a chart"""
    days: Int! = 0

    """User's local timezone offset in minutes"""
    timezoneOffset: Int! = 0
  ): [ChartDataItem]

  """Returns number of unread events"""
  unreadCount: Int!

  """Project notification settings"""
  notifications: [ProjectNotificationsRule]
}

"""Input type for specifying project notifications rule"""
input ProjectNotificationRulePointer {
  """Project id which owns the rule"""
  projectId: ID!

  """Rule id to delete"""
  ruleId: ID!
}

"""Project notify settings"""
type ProjectNotificationsRule {
  """Notification settings id"""
  id: ID!

  """True if settings is enabled"""
  isEnabled: Boolean!

  """What events type to recieve"""
  whatToReceive: ReceiveTypes!

  """Words to include in notification"""
  including: [String!]!

  """Words to exclude from notification"""
  excluding: [String!]!

  """Notification channels to recieve events"""
  channels: NotificationsChannels
}

"""API queries"""
type Query {
  """Healthcheck endpoint"""
  health: String!

  """Get workspace billing history"""
  businessOperations(
    """Workspaces IDs"""
    ids: [ID!] = []
  ): [BusinessOperation!]!

  """Returns project info"""
  project(
    """Project id"""
    id: ID!
  ): Project

  """Returns authenticated user data"""
  me: User

  """
  Returns workspace(s) info
  If ids = [] returns all user's workspaces
  """
  workspaces(
    """Workspace(s) id(s)"""
    ids: [ID] = []
  ): [Workspace]

  """Gets available Hawk tariff plans"""
  plans: [Plan!]!
}

"""What events to receive"""
enum ReceiveTypes {
  """Receive only new events"""
  ONLY_NEW

  """Receive all events"""
  ALL
}

"""Event information per day with these events"""
type RecentEvents {
  """Occured events list"""
  events: [Event!]

  """Information about occurred events per day"""
  dailyInfo: [DailyEventInfo]
}

input RemoveAssigneeInput {
  """ID of project event is related to"""
  projectId: ID!

  """ID of the selected event"""
  eventId: ID!
}

type RemoveAssigneeResponse {
  """Response status"""
  success: Boolean!
}

"""Event's repetitions. Make Event unique by repetition's payload"""
type Repetition {
  """Standalone repetition ID"""
  id: ID!

  """Event's hash"""
  groupHash: String!

  """Event's payload patch"""
  payload: RepetitionPayload!
}

"""Type representing Event payload"""
type RepetitionPayload {
  """Event timestamp"""
  timestamp: Float

  """Event severity level"""
  level: Int

  """Event stack array from the latest call to the earliest"""
  backtrace: [EventBacktraceFrame!]

  """Additional data about GET request"""
  get: JSONObject

  """Additional data about POST request"""
  post: JSONObject

  """HTTP headers"""
  headers: JSONObject

  """Source code version identifier"""
  release: String

  """Current authenticated user"""
  user: EventUser

  """Any additional data of Event"""
  context: EncodedJSON

  """Custom data provided by project users"""
  addons: EncodedJSON
}

"""Source code line representation"""
type SourceCodeLine {
  """Line number"""
  line: Int

  """Line's content"""
  content: String
}

type Subscription {
  """Sends new events from all user projects"""
  eventOccurred: Event!
}

"""Languages supported by the Tinkoff"""
enum SupportedBillingLanguages {
  EN
  RU
}

"""Authentication token"""
type Tokens {
  """User's access token"""
  accessToken: String!

  """User's refresh token for getting new token pair"""
  refreshToken: String!
}

input UpdateAssigneeInput {
  """ID of project event is related to"""
  projectId: ID!

  """ID of the selected event"""
  eventId: ID!

  """Assignee id to set"""
  assignee: ID!
}

type UpdateAssigneeResponse {
  """Response status"""
  success: Boolean!

  """User assigned to the event"""
  record: User!
}

"""Input type for updating exsiting notification rule"""
input UpdateProjectNotificationsRuleInput {
  """Rule id to update"""
  ruleId: ID!

  """Project id to setup"""
  projectId: ID!

  """True if settings is enabled"""
  isEnabled: Boolean! = true

  """What events type to recieve"""
  whatToReceive: ReceiveTypes! = ONLY_NEW

  """Words to include in notification"""
  including: [String!]! = []

  """Words to exclude from notification"""
  excluding: [String!]! = []

  """Notification channels to recieve events"""
  channels: NotificationsChannelsInput!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""Represent User type"""
type User {
  """User's id"""
  id: ID!

  """User's email"""
  email: String

  """User's name"""
  name: String

  """User's image"""
  image: String

  """User notifications settings"""
  notifications: UserNotificationsSettings

  """Saved bank cards for one-click payments"""
  bankCards: [BankCard!]
}

"""Available notify types with their active statuses"""
type UserNotificationsReceiveTypesSet {
  """When user is assigned to the issue (event)"""
  IssueAssigning: Boolean

  """Regular digest of what happened on the project for the week"""
  WeeklyDigest: Boolean

  """Only important messages from Hawk team"""
  SystemMessages: Boolean
}

"""This object stored in user.notifications field"""
type UserNotificationsSettings {
  """Available notify types with their active statuses"""
  whatToReceive: UserNotificationsReceiveTypesSet!

  """Available channels with their data"""
  channels: NotificationsChannels!
}

enum UserNotificationType {
  """When user is assigned to the issue (event)"""
  IssueAssigning

  """Regular digest of what happened on the project for the week"""
  WeeklyDigest

  """Only important messages from Hawk team"""
  SystemMessages
}

"""Represent Workspace info"""
type Workspace {
  """Workspace id"""
  id: ID!

  """Workspace name"""
  name: String

  """Workspace description"""
  description: String

  """Workspace logo image"""
  image: String

  """Workspace team info"""
  team: [Member!]!

  """Total number of errors since the last charge date"""
  billingPeriodEventsCount: Int

  """Workspace tariff plan"""
  plan: Plan

  """Date when workspace was charged last time"""
  lastChargeDate: DateTime

  """
  ID of subscription if it subscribed
  Returns from CloudPayments
  """
  subscriptionId: String

  """True if workspace is used for debugging"""
  isDebug: Boolean

  """True if workspace is blocked"""
  isBlocked: Boolean

  """Workspace projects array"""
  projects(
    """Project(s) id(s)"""
    ids: [ID!] = []
  ): [Project!]
}

"""Mutations for workspace"""
type WorkspaceMutations {
  cancelSubscription(input: CancelSubscriptionInput!): CancelSubscriptionResponse!
}

